// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../time/models.js";

export class Config {
    /**
     * Creates a new Config instance.
     * @param {Partial<Config>} [$$source = {}] - The source object to create the Config.
     */
    constructor($$source = {}) {
        if (!("checkInterval" in $$source)) {
            /**
             * intervalo en segundos
             * @member
             * @type {number}
             */
            this["checkInterval"] = 0;
        }
        if (!("retentionDays" in $$source)) {
            /**
             * días de retención de datos
             * @member
             * @type {number}
             */
            this["retentionDays"] = 0;
        }
        if (!("sites" in $$source)) {
            /**
             * @member
             * @type {Site[]}
             */
            this["sites"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Config instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Config}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("sites" in $$parsedSource) {
            $$parsedSource["sites"] = $$createField2_0($$parsedSource["sites"]);
        }
        return new Config(/** @type {Partial<Config>} */($$parsedSource));
    }
}

/**
 * Estructura para estadísticas diarias
 */
export class DailyStats {
    /**
     * Creates a new DailyStats instance.
     * @param {Partial<DailyStats>} [$$source = {}] - The source object to create the DailyStats.
     */
    constructor($$source = {}) {
        if (!("date" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["date"] = "";
        }
        if (!("totalChecks" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["totalChecks"] = 0;
        }
        if (!("upChecks" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["upChecks"] = 0;
        }
        if (!("downChecks" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["downChecks"] = 0;
        }
        if (!("uptimePercent" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["uptimePercent"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DailyStats instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {DailyStats}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DailyStats(/** @type {Partial<DailyStats>} */($$parsedSource));
    }
}

export class Site {
    /**
     * Creates a new Site instance.
     * @param {Partial<Site>} [$$source = {}] - The source object to create the Site.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("method" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["method"] = "";
        }
        if (!("timeout" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["timeout"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Site instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Site}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Site(/** @type {Partial<Site>} */($$parsedSource));
    }
}

export class SiteDetail {
    /**
     * Creates a new SiteDetail instance.
     * @param {Partial<SiteDetail>} [$$source = {}] - The source object to create the SiteDetail.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("method" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["method"] = "";
        }
        if (!("timeout" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["timeout"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["status"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["statusCode"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["responseTime"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["lastChecked"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["errorMessage"] = "";
        }
        if (!("isActive" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["isActive"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SiteDetail instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SiteDetail}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new SiteDetail(/** @type {Partial<SiteDetail>} */($$parsedSource));
    }
}

/**
 * Estructura para el status completo de un sitio
 */
export class SiteStatusDetail {
    /**
     * Creates a new SiteStatusDetail instance.
     * @param {Partial<SiteStatusDetail>} [$$source = {}] - The source object to create the SiteStatusDetail.
     */
    constructor($$source = {}) {
        if (!("siteName" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["siteName"] = "";
        }
        if (!("siteUrl" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["siteUrl"] = "";
        }
        if (!("lastStatus" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["lastStatus"] = "";
        }
        if (!("lastStatusCode" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["lastStatusCode"] = 0;
        }
        if (!("lastResponseTime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["lastResponseTime"] = 0;
        }
        if (!("lastChecked" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["lastChecked"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["lastErrorMessage"] = "";
        }
        if (!("dailyStats" in $$source)) {
            /**
             * @member
             * @type {DailyStats[]}
             */
            this["dailyStats"] = [];
        }
        if (!("totalStats" in $$source)) {
            /**
             * @member
             * @type {DailyStats}
             */
            this["totalStats"] = (new DailyStats());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SiteStatusDetail instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SiteStatusDetail}
     */
    static createFrom($$source = {}) {
        const $$createField7_0 = $$createType3;
        const $$createField8_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("dailyStats" in $$parsedSource) {
            $$parsedSource["dailyStats"] = $$createField7_0($$parsedSource["dailyStats"]);
        }
        if ("totalStats" in $$parsedSource) {
            $$parsedSource["totalStats"] = $$createField8_0($$parsedSource["totalStats"]);
        }
        return new SiteStatusDetail(/** @type {Partial<SiteStatusDetail>} */($$parsedSource));
    }
}

export class StatusCheck {
    /**
     * Creates a new StatusCheck instance.
     * @param {Partial<StatusCheck>} [$$source = {}] - The source object to create the StatusCheck.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("siteName" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["siteName"] = "";
        }
        if (!("siteUrl" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["siteUrl"] = "";
        }
        if (!("status" in $$source)) {
            /**
             * "up", "down"
             * @member
             * @type {string}
             */
            this["status"] = "";
        }
        if (!("statusCode" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["statusCode"] = 0;
        }
        if (!("responseTime" in $$source)) {
            /**
             * en milisegundos
             * @member
             * @type {number}
             */
            this["responseTime"] = 0;
        }
        if (!("checkedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["checkedAt"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["errorMessage"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new StatusCheck instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {StatusCheck}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new StatusCheck(/** @type {Partial<StatusCheck>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = Site.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = DailyStats.createFrom;
const $$createType3 = $Create.Array($$createType2);
