// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @param {string} name
 * @param {string} url
 * @param {string} method
 * @param {number} timeout
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddSite(name, url, method, timeout) {
    let $resultPromise = /** @type {any} */($Call.ByID(992293996, name, url, method, timeout));
    return $resultPromise;
}

/**
 * @returns {Promise<$models.SiteDetail[]> & { cancel(): void }}
 */
export function GetAllSites() {
    let $resultPromise = /** @type {any} */($Call.ByID(1742193065));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * Métodos expuestos al frontend
 * @returns {Promise<$models.StatusCheck[]> & { cancel(): void }}
 */
export function GetAllStatus() {
    let $resultPromise = /** @type {any} */($Call.ByID(3889932381));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<$models.Config> & { cancel(): void }}
 */
export function GetConfig() {
    let $resultPromise = /** @type {any} */($Call.ByID(1765635878));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} siteName
 * @returns {Promise<$models.StatusCheck[]> & { cancel(): void }}
 */
export function GetSiteStatus(siteName) {
    let $resultPromise = /** @type {any} */($Call.ByID(2335009477, siteName));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<{ [_: string]: any }> & { cancel(): void }}
 */
export function GetStats() {
    let $resultPromise = /** @type {any} */($Call.ByID(3336061195));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType5($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} siteName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ManualCheck(siteName) {
    let $resultPromise = /** @type {any} */($Call.ByID(3351395354, siteName));
    return $resultPromise;
}

/**
 * @param {string} name
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveSite(name) {
    let $resultPromise = /** @type {any} */($Call.ByID(2324023639, name));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Start() {
    let $resultPromise = /** @type {any} */($Call.ByID(4223079696));
    return $resultPromise;
}

/**
 * @param {number} checkInterval
 * @param {number} retentionDays
 * @returns {Promise<void> & { cancel(): void }}
 */
export function UpdateConfig(checkInterval, retentionDays) {
    let $resultPromise = /** @type {any} */($Call.ByID(2862404239, checkInterval, retentionDays));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $models.SiteDetail.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $models.StatusCheck.createFrom;
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = $models.Config.createFrom;
const $$createType5 = $Create.Map($Create.Any, $Create.Any);
